{"version":3,"sources":["components/NavBar.tsx","models/ToDoElement.tsx","api/api.ts","components/ToDoProvider.tsx","components/ToDoList.tsx","components/ToDoForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavBar","useState","activeItem","setActiveItem","Menu","pointing","secondary","Item","id","name","active","onClick","e","target","toDoData","Id","Content","Active","Created","Date","Edited","getToDo","find","t","postToDo","todo","taskId","Math","max","map","push","oldtodo","indexOf","toDoContextDefault","message","setMessage","tasks","setTasks","ToDoContext","createContext","ToDoProvider","children","useEffect","Provider","value","ToDoList","useContext","handleDelete","splice","deleteToDo","filter","success","header","content","Header","as","textAlign","length","task","Segment","Grid","Column","floated","mobile","tablet","computer","Button","size","type","toggleActive","color","toLocaleDateString","toLocaleTimeString","className","Link","to","Divider","horizontal","Icon","NavLink","positive","ToDoForm","history","useHistory","useParams","setTask","Number","Form","onSubmit","trim","some","validateContext","error","Input","required","label","placeholder","onChange","event","Checkbox","checked","App","Container","text","style","marginTop","path","exact","component","Message","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf4e9d83.chunk.js","sourcesContent":["import React, { MouseEvent, useState } from \"react\";\r\nimport { Menu } from \"semantic-ui-react\";\r\n\r\nexport default function NavBar() {\r\n    const [ activeItem, setActiveItem] = useState<string>('home')\r\n\r\n    function handleItemClick (e: MouseEvent) {\r\n        const target=e.target as HTMLAnchorElement;\r\n        setActiveItem(target.id)\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Menu pointing secondary>\r\n          <Menu.Item\r\n            id='home'\r\n            name='home'\r\n            active={activeItem === 'home'}\r\n            onClick={handleItemClick}\r\n          />\r\n          \r\n        </Menu>\r\n      </div>\r\n    )\r\n}","export interface ToDoElement {\r\n    Id: number,\r\n    Content: string,\r\n    Active: boolean,\r\n    Created: Date,\r\n    Edited: Date\r\n}\r\n\r\nexport const toDoData: ToDoElement[] = [\r\n    {\r\n        Id: 1,\r\n        Content: 'Drink some coffee',\r\n        Active: true,\r\n        Created: new Date(),\r\n        Edited: new Date()\r\n    },\r\n    {\r\n        Id: 2,\r\n        Content: 'Develop a ToDo program',\r\n        Active: true,\r\n        Created: new Date(),\r\n        Edited: new Date()\r\n    }\r\n] \r\n","import { toDoData, ToDoElement } from \"../models/ToDoElement\"\r\n\r\nexport const getToDoList = () => {\r\n    return (toDoData);\r\n}\r\n\r\nexport const getToDo = (id: Number) => {\r\n    const todo = toDoData.find(t => t.Id === id)\r\n    return (todo);\r\n}\r\n\r\nexport const postToDo = (todo: ToDoElement) => {\r\n    if (todo.Id === 0){\r\n        const taskId = Math.max(...toDoData.map(t => t.Id)) + 1;\r\n        todo.Id = taskId;\r\n        toDoData.push(todo);\r\n    } else {\r\n        const oldtodo = toDoData.find(t => t.Id === todo.Id);\r\n        if (oldtodo){\r\n            toDoData[toDoData.indexOf(oldtodo)] = todo;\r\n        }\r\n    }    \r\n    return todo;\r\n}\r\n\r\nexport const deleteToDo = (id: number) => {\r\n    if (id) {\r\n        const oldtodo = toDoData.find(t => t.Id === id);\r\n        if (oldtodo){\r\n            toDoData.splice(toDoData.indexOf(oldtodo), 1);\r\n        }\r\n    }\r\n}","import React, { createContext, useEffect, useState } from \"react\";\r\nimport { getToDoList } from \"../api/api\";\r\nimport { ActionMessage } from \"../models/ActionMessage\";\r\nimport { ToDoContextType } from \"../models/ToDoContextType\";\r\nimport { ToDoElement } from \"../models/ToDoElement\";\r\n\r\nconst toDoContextDefault: ToDoContextType = {\r\n    message: null,\r\n    setMessage: null,\r\n    tasks: [],\r\n    setTasks: null\r\n}\r\n\r\nexport const ToDoContext = createContext<ToDoContextType>(toDoContextDefault);\r\n\r\ninterface Props {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport default function ToDoProvider({children}: Props) {\r\n    const [tasks, setTasks] = useState<ToDoElement[]>([]);\r\n    const [message, setMessage] = useState<ActionMessage | null> (null);\r\n\r\n    useEffect(() => {\r\n        setTasks(getToDoList());\r\n    }, [])\r\n\r\n    return (\r\n        <ToDoContext.Provider value={{tasks, setTasks, message, setMessage}}>\r\n            {children}\r\n        </ToDoContext.Provider>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Divider, Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport { deleteToDo, getToDo, postToDo } from \"../api/api\";\r\nimport { ToDoContext } from \"./ToDoProvider\";\r\n\r\nexport default function ToDoList() {\r\n    const {tasks, setTasks, setMessage} = useContext(ToDoContext);\r\n\r\n    function handleDelete(id: number) {\r\n        deleteToDo(id);\r\n        setTasks(tasks.filter(t => t.Id !== id));\r\n        setMessage({\r\n                success: true,\r\n                header: 'Success',\r\n                content: 'Task successsfully deleted'\r\n            });\r\n    }\r\n\r\n    function toggleActive(id: number) {\r\n        const task = getToDo(id);\r\n        if (task) {\r\n            task.Edited = new Date();\r\n            task.Active = !task.Active;\r\n            postToDo(task);\r\n            setMessage({\r\n                success: true,\r\n                header: 'Success',\r\n                content: 'Task successsfully edited'\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h2' textAlign='center' > List of tasks</Header>\r\n            {tasks.length > 0 && tasks.map( task => (\r\n                <Segment key={task.Id}>\r\n                    <Header>{task.Content}</Header>\r\n                    <Grid>\r\n                        <Grid.Column floated='left' mobile={16} tablet={8} computer={8}>\r\n                            <Button size='mini' type='button' onClick={() => toggleActive(task.Id)} color={task.Active ? 'orange' : 'teal'}>{task.Active ? 'Active' : 'Already done'}</Button>\r\n                            {task.Created < task.Edited ?\r\n                            <p>Edited: {task.Edited.toLocaleDateString()} at {task.Edited.toLocaleTimeString()}</p>\r\n                            : <p>Created: {task.Created.toLocaleDateString()} at {task.Created.toLocaleTimeString()}</p>}\r\n                        </Grid.Column>\r\n                        <Grid.Column floated='right' mobile={16} tablet={7} computer={7}>\r\n                            <div className='ui two buttons'>\r\n                            <Button color='green' as={Link} to={`/edittodo/${task.Id}`}>Edit</Button>\r\n                            <Button color='orange' onClick={()=>handleDelete(task.Id)}>Delete</Button>\r\n                            </div>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Segment>\r\n            ))}\r\n            <Divider horizontal>\r\n                <Header as='h4'>\r\n                    <Icon name='edit outline' />\r\n                    New Task\r\n                </Header>\r\n            </Divider>\r\n            <Button as={NavLink} to='/newtodo' positive content='Create Task'/>\r\n        </>\r\n    )\r\n}","import React, { ChangeEvent, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Form, Header } from \"semantic-ui-react\";\r\nimport { getToDo, postToDo } from \"../api/api\";\r\nimport { ToDoElement } from \"../models/ToDoElement\";\r\nimport { ToDoContext } from \"./ToDoProvider\";\r\n\r\nexport default function ToDoForm() {\r\n    const {tasks, message, setMessage} = useContext(ToDoContext);\r\n    const history = useHistory();\r\n    const {id} = useParams<{id: string}>();\r\n    const [task, setTask] = useState<ToDoElement>({\r\n        Id: 0,\r\n        Content: '',\r\n        Active: true,\r\n        Created: new Date(),\r\n        Edited: new Date()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            const todo = getToDo(Number(id));\r\n            if (todo) {\r\n                setTask(todo);\r\n            }\r\n        };\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }, [])\r\n\r\n    function handleSubmit() {\r\n        if (validateContext()){\r\n            if (task.Id !== 0) {\r\n                task.Edited = new Date();\r\n            }\r\n            postToDo(task);\r\n            setMessage({\r\n                success: true,\r\n                header: 'Success',\r\n                content: 'Task successsfully added'\r\n            });\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>){\r\n        const {name, value}=event.target;\r\n        setTask({...task, [name]: value});\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }\r\n\r\n    function toggleActive() {\r\n        setTask({...task, Active: !task.Active});\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }\r\n\r\n    function closeForm() {\r\n        history.push('/');\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }\r\n\r\n    function validateContext() {\r\n        if (task.Content.trim() === '') {\r\n            setMessage({\r\n                success: false,\r\n                header: 'Empty Task',\r\n                content: 'Task is empty, please fill task description'\r\n            });\r\n            return false;\r\n        } else if (tasks.some(t => t.Content === task.Content)) {\r\n            setMessage({\r\n                success: false,\r\n                header: 'Task duplication',\r\n                content: 'Such task already exist, please submit another task'\r\n            });\r\n            return false;\r\n        };\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Header as='h2' textAlign='center'>{id?'Edit':'New'} task</Header>\r\n            <Form onSubmit={handleSubmit} error>\r\n                <Form.Input required label='Task description' placeholder='Write the task here' value={task.Content || ''} name='Content' onChange={handleInputChange}/>\r\n                <Form.Checkbox label='Active' checked={task.Active || false} name='Active' onChange={toggleActive}/>\r\n                <Button positive type='submit'>Submit</Button>\r\n                <Button onClick={closeForm} type='button'>Cancel</Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}","import React, { useContext } from 'react';\nimport 'semantic-ui-css/semantic.min.css'\nimport NavBar from './components/NavBar';\nimport { Container, Message } from 'semantic-ui-react';\nimport { Route, Switch } from 'react-router-dom';\nimport ToDoList from './components/ToDoList';\nimport ToDoForm from './components/ToDoForm';\nimport { ToDoContext } from './components/ToDoProvider';\n\nfunction App() {\nconst {message} = useContext(ToDoContext);\n\n  return (\n    <div className=\"App\">\n      <NavBar/>\n        <Container text style={{marginTop: '3em'}}>\n          <Switch>\n            <Route path='/' exact component={ToDoList}/>\n            <Route path={['/newtodo','/edittodo/:id']} \n              component={ToDoForm}/>\n          </Switch>\n          {message && \n            <Message\n                    error={!message.success}\n                    success={message.success}\n                    header={message.header}\n                    content={message.content}\n                />\n          }\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport ToDoProvider from './components/ToDoProvider';\n\nReactDOM.render(\n    <ToDoProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ToDoProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}